buildscript {
	ext {
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'br.com.adaca'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

bootJar {
	baseName = 'gerenciador-adaca'
	version =  '0.1.0'
	mainClassName = 'br.com.adaca.GerenciadorApplication'
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-test')
	compile('org.keycloak:keycloak-spring-boot-starter:5.0.0')
	compile('org.keycloak.bom:keycloak-adapter-bom:3.3.0.Final')
	compileOnly('org.projectlombok:lombok:1.18.6')
	annotationProcessor('org.projectlombok:lombok:1.18.6')
	compile('org.mapstruct:mapstruct-jdk8:1.3.0.Final')
	compileOnly('org.mapstruct:mapstruct-processor:1.3.0.Final')
	annotationProcessor('org.mapstruct:mapstruct-processor:1.3.0.Final')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

idea {
	project {
		ipr {
			withXml { provider ->
				// Get XML as groovy.util.Node to work with.
				def projectXml = provider.asNode()

				// Find compiler configuration component.
				def compilerConfiguration = projectXml.component.find { component ->
					component.'@name' == 'CompilerConfiguration'
				}

				// Replace current annotationProcessing
				// that is part of the compiler configuration.
				def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
				currentAnnotationProcessing.replaceNode {
					annotationProcessing {
						profile(name: 'Default', default: true, enabled: true) {
							processorPath(useClasspath: true)
						}
					}
				}
			}
		}
	}
}
